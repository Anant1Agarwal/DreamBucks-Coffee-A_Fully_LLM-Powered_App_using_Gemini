We want the backend system Such that we can store images. A bucket based system Where you can upload images and files, and retrieve them easily

We also want a database system where we can upload product data in the form of JSON and retrieve it easily.

Firebase is a good option for this. We can use Firebase storage for storing images and files and Firebase Firestore/RealTime Database for storing JSON data.

firebase databse is a NoSQL database. It is a document-oriented database. It stores data in the form of JSON. It is a cloud-hosted database. It is a real-time database. It is a scalable database. It is a serverless

In Firebase, we need RealTime Database and Storage. 

Generate Service Account Key 
No way of uploading/push Service Account Key credentials to server securely, so we use .env file to store the credentials by copying the credentials from the Service Account Key.json file


Firebase storage is not free, so only 1 gb of data can be stored for free.

FIREBASE_TYPE=
FIREBASE_PROJECT_ID=
FIREBASE_PRIVATE_KEY_ID=
FIREBASE_PRIVATE_KEY=
FIREBASE_CLIENT_EMAIL=
FIREBASE_CLIENT_ID=
FIREBASE_AUTH_URI=
FIREBASE_TOKEN_URI=
FIREBASE_AUTH_PROVIDER_X509_CERT_URL=
FIREBASE_CLIENT_X509_CERT_URL=
FIREBASE_UNIVERSE_DOMAIN=

pinecone index name is the name of the index in the pinecone database. It is used to store the embeddings of the images. It is used to search for similar items

i don't need to specify cosine similarity in the pinecone search function. It is the default similarity function in pinecone and it handles it effieciently by itself

Agent coordinator/controller has all the agents together and defines the correct order of agent calling, and the correct order of agent execution. It is the main agent that controls all the other agents.

Agent Protocols define certain functions that we can call on the agents. It is the interface that the agents implement. It is the contract that the agents follow.

Guard Agent protects the system from any malicious activity. It is the security agent that protects the system from any unauthorized access.
it sends a message if any irrelavant message is sent to the chatbot

classification agent is used to classify task into categories if chat is allowed by guard agent.
it chooses among details_agent, order_taking_agent, recommendation_agent.

go on localhost:8000/docs and test the forTestingPurposes.json and see for yourself the output on fastapi

learn fastapi to be deployed on AWS EC2


FRONTEND START
install Node

install expo go on your phone
expo go is basically a mobile app that you can download from the app store. It allows you to run your expo projects on your phone. You can scan the QR code generated by the expo server to run your project on your phone.
it helps by having helper packages which make our life easy
https://docs.expo.dev/router/installation/
npx create-expo-app@latest ./
npx expo install expo-router react-native-safe-area-context react-native-screens expo-linking expo-constants expo-status-bar
npx expo install nativewind tailwindcss react-native-reanimated react-native-safe-area-context
npx expo start --tunnel
scan the QR code generated by the expo server to run your project on your phone

npm run reset-project

nativewind is a good option for the frontend. It is a good UI library for react native. It has a lot of components that we can use to build our UI. 
https://www.nativewind.dev/v2/quick-starts/expo

npm install nativewind
npm install --save-dev tailwindcss@3.3.2

npx tailwindcss init

(tabs) in expo lets you create a tab based navigation in your app. It is used to create a bottom tab navigation in your app. It is used to navigate between different screens in your app.

SafeAreaView is a component that is used to make sure that the content of the app is not hidden by the status bar, navigation bar, or any other system UI elements. It is used to make sure that the content of the app is visible to the user.
npx expo start --offline

Stack is a component that is used to create a stack-based navigation in your app. It is used to navigate between different screens in your app. It is used to create a stack of screens in your app.

if permission denied in fetching products. change rules in firebase storage to allow read and write to everyone read true write true and just for testing, for production {
  "rules": {
    ".read": "auth != null",
    ".write": false
  }
}

context is a component that is used to pass data between different components in your app. It is used to share data between different components in your app. It is Global state management in react native.
whereas state is local state management in react native



docker compose up --build
docker compose up


on amazon ec2 instance,run these commands
sudo yum update -y
sudo yum -y install docker

sudo service docker start

sudo usermod -a -G docker ec2-user
pwd

mkdir downloads_backend
cd downloads_backend


in VSCODE terminal of backend folder API
chmod 600 AA-Key-1.pem

scp -i AA-Key-1.pem dockerfile app.py requirement.txt

//Write code to upload all the files to the ec2 instance
# Upload all files in the current directory to the EC2 instance
scp -i AA-Key-1.pem * ec2-user@<EC2_INSTANCE_PUBLIC_DNS>:/home/ec2-user/downloads_backend/
scp i AA-Key-1.pem .

scp -i AA-Key-1.pem -r * ec2-user@1:/home/ec2-user/downloads_backend/

scp -i AA-Key-1.pem -r .env ec2-user@1/:/home/ec2-user/downloads_backend/

scp -i your-key.pem -r my_fastapi_app ec2-user@your-ec2-public-ip:/home/ec2-user/

in the ec2 instance terminal
# Download the latest version of Docker Compose
sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version


sudo docker build -t fastapi_backend_coffeeshop:v1.0 -f Dockerfile .

sudo docker run -d -p 80:8000 fastapi_backend_coffeeshop:v1.0
or
 sudo docker run -p 8000:8000 fastapi_backend_coffeeshop:v1.0

sudo docker ps


sudo apt update
sudo apt install docker.io
sudo systemctl start docker
sudo systemctl enable docker

scp -i AA-Key-1.pem -r .env ubuntu@16.170.240.220:/home/ubuntu/downloads_backend/
scp -i AA-Key-1.pem -r .env ubuntu@3.3.3.3.:/home/ubuntu/downloads_backend/


docker run -p 8000:8000 fastapi-app
